#summary A must read for using the Decompose interface.

In this page I'm going to cover how to parse the Decompose output.

Valid instructions
Invalid instructions
Basic fields
Use macros


typedef struct tag_DInst { 
<b>_OffsetType addr;</b>
 * Always set.
 * The virtual address of the instruction.
 * It is determined according to the given start address of the call to the Decompose function.

<b>uint8_t size;</b>
 * Always set.
 * The size of the whole instruction. Varying from 1 to 15 bytes long.

<b>uint16_t flags;</b>
 * Always set.
 * Very important to check this field before touching the other fields.
 * If it's set to FLAG_NOT_DECODABLE, the instruction is invalid.

<b>uint8_t segment;</b>
 * Set when one of the operands is of type O_SMEM, O_MEM, O_DISP.
 * Helper macros: SEGMENT_GET, SEGMENT_IS_DEFAULT.
 * SEGMENT_IS_DEFAULT returns TRUE if the segment register is the default one for the operand. For instance: MOV [EBP], AL - the default segment register is SS. However, MOV [FS:EAX], AL - The default segment is DS, but we overrode it with FS, therefore the macro will return TRUE.
 * To extract the segment register index use the SEGMENT_GET macro.
 * If the operands don't represent memory indirection the value of 'segment' is R_NONE.

<b>uint8_t base;</b>
 * Set when one of the operands is of type O_MEM.
 * 

<b>uint8_t dispSize;</b>
<b>uint16_t opcode;</b>
<b>_Operand ops[OPERANDS_NO];</b>
<b>uint64_t disp;</b>
<b>_Value imm;</b>
<b>uint16_t unusedPrefixesMask;</b>
<b>uint8_t meta;</b>
} _DInst;